<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Persistence.Repositories.EntityFramework.NetStandard</name>
    </assembly>
    <members>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.DisposableContext`1">
            <summary>
            A single use disposable EF context. Not thread safe.
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.DisposableContext`1.#ctor(System.String)">
            <summary>
            Creates a new instance of this context
            </summary>
            <param name="connectionString">The connection string to use during construction</param>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1">
            <summary>
            A persistence context that uses Entity Framework as its backing for data
            </summary>
            <typeparam name="T">The type of the object contained in this context</typeparam>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.DbContext">
            <summary>
            The backing Entity Framework DbContext for this context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.IsValid">
            <summary>
            If true, this context has access to a valid DbSet T  on the underlying provider
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.WriteEnabled">
            <summary>
            If true, this context has a valid open WriteContext
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.#ctor(System.Data.Entity.DbContext,Penguin.Messaging.Core.MessageBus)">
            <summary>
            Creates a new instance of this persistence context
            </summary>
            <param name="dbContext">The underlying DbContext to use as the data source</param>
            <param name="messageBus">An optional message bus for publishing persistence events</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Add(`0[])">
            <summary>
            Adds a range of objects to the underlying context
            </summary>
            <param name="o">The objects to add</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Add(System.Object[])">
            <summary>
            Adds a range of objects to the underlying context
            </summary>
            <param name="o">The objects to add</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.AddOrUpdate(`0[])">
            <summary>
            Adds or updates a range of objects to the underlying context
            </summary>
            <param name="o">The objects to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.BeginWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Takes the specified WriteContext and registers it, then enables data persistence. If this is the first open context, all entities retrieved before this point are detached to prevent accidental saves
            </summary>
            <param name="context">The write context to open this persistence context with</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.CancelWrite">
            <summary>
            Closes all open write contexts, and detaches all changed entities for safety
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Commit(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Commits all changed entities to the database. requires a valid open write context to ensure operations are being performed in the correct scope
            </summary>
            <param name="writeContext">Any valid open write context</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.CommitASync(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Commits all changed entities to the database. requires a valid open write context to ensure operations are being performed in the correct scope
            </summary>
            <param name="writeContext">Any valid open write context</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Delete(`0[])">
            <summary>
            Deletes a collection of entities from the underlying context. If auditableEntities, simply sets the date deleted
            </summary>
            <param name="o">the objects to delete</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Delete(System.Object[])">
            <summary>
            Deletes a collection of entities from the underlying context. If auditableEntities, simply sets the date deleted
            </summary>
            <param name="o">the objects to delete</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.DetachAll">
            <summary>
            Detatches all entities currently attached to the underlying dbcontext
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.EndWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Closes the provided writecontext, and persists changes if it was the last open context (then detaches entities)
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.GetWriteContexts">
            <summary>
            Returns an immutable array of all writecontexts currently open on this persistence context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.IsDisposed">
            <summary>
            Checks if the underlying DbContext has been disposed of
            </summary>
            <returns>if the underlying DbContext has been disposed of</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Update(`0[])">
            <summary>
            Updates a list of objects on the underlying DbContext
            </summary>
            <param name="o">The object list to update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Update(System.Object[])">
            <summary>
            Updates a list of objects on the underlying DbContext
            </summary>
            <param name="o">The object list to update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.WriteContext">
            <summary>
            Generates a new WriteContext capable of opening this PersistenceContext
            </summary>
            <returns>A new WriteContext capable of opening this PersistenceContext</returns>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.MessageBus">
            <summary>
            The optionally provided message bus for sending persistence messages over
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.IncludeStrings(System.Type,System.String,System.Boolean)">
            <summary>
            Generates a list of strings to Include while accessing the database, using the EagerLoad attributes found on the properties
            </summary>
            <param name="toGenerate">The type to generate the strings for</param>
            <param name="NameSpace">The current namespace formatted property list representing where we are in our recursive hierarchy</param>
            <param name="Recursive">Whether or not we should continue recursing into child properties</param>
            <returns>A list of strings to Include while accessing the database</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.IncludeStrings(System.Collections.Generic.Stack{System.Type},System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Generates a list of strings to Include while accessing the database, using the EagerLoad attributes found on the properties
            </summary>
            <param name="toGenerate">The type to generate the strings for</param>
            <param name="NameSpace">The current namespace formatted property list representing where we are in our recursive hierarchy</param>
            <param name="Recursive">Whether or not we should continue recursing into child properties</param>
            <param name="depth">Any depth that has already been specified (as non infinite) to be used when capping off the recursion</param>
            <returns>A list of strings to Include while accessing the database</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.UpdateTimestamps(System.Object[])">
            <summary>
            If the object is an AuditableEntity, this updates the timestamps during saves
            </summary>
            <param name="o">The objects to update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.OfType``1">
            <summary>
            Returns a subset including only the derived type from the underlying persistence context
            </summary>
            <typeparam name="TDerived">A type derived from the persitence context type</typeparam>
            <returns>A subset including only the derived type from the underlying persistence context</returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.WriteContextBag">
            <summary>
            Generic types dont share static properties so this holder
            exists to provide all context types with access to the same bag through a shared class
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.WriteContextBag.Item(System.Data.Entity.DbContext)">
            <summary>
            Accesses contexts in this bag that are associated with the specified DbContext
            </summary>
            <param name="context">The DbContext to use when getting the WriteContexts</param>
            <returns></returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.WriteContext">
            <summary>
            A WriteContext implementation intended for use with the EFPersistenceContext
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Async">
            <summary>
            A bool representing whether or not this WriteContext should attempt to commit changes asynchronously
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Context">
            <summary>
            The PersistenceContext that spawned this write context
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.#ctor(Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext)">
            <summary>
            Creates a new instance of this write context using the provided persistencecontext as a source
            </summary>
            <param name="context">The persistence context to use for these changes</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.CancelWrite">
            <summary>
            Cancels any open writes and detaches all entities
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Dispose">
            <summary>
            Disposes of this WriteContext and attempts to persist any changes
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Finalize">
            <summary>
            Disposes of this WriteContext and attempts to persist any changes
            </summary>
        </member>
    </members>
</doc>
