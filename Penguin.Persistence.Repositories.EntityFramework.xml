<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Persistence.Repositories.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.DisposableContext`1">
            <summary>
            A single use disposable EF context. Not thread safe.
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.DisposableContext`1.#ctor(System.String)">
            <summary>
            Creates a new instance of this context
            </summary>
            <param name="connectionString">The connection string to use during construction</param>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1">
            <summary>
            A persistence context that uses Entity Framework as its backing for data
            </summary>
            <typeparam name="T">The type of the object contained in this context</typeparam>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.DbContext">
            <summary>
            The backing Entity Framework DbContext for this context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.IsValid">
            <summary>
            If true, this context has access to a valid DbSet T  on the underlying provider
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.WriteEnabled">
            <summary>
            If true, this context has a valid open WriteContext
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.MessageBus">
            <summary>
            The optionally provided message bus for sending persistence messages over
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.PrimaryDataSource">
            <summary>
            Returns an IQueriable that accesses the current DbSet
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.#ctor(Penguin.Persistence.Repositories.EntityFramework.Abstractions.Interfaces.IDbContext,Penguin.Messaging.Core.MessageBus)">
            <summary>
            Creates a new instance of this persistence context
            </summary>
            <param name="dbContext">The underlying DbContext to use as the data source</param>
            <param name="messageBus">An optional message bus for publishing persistence events</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Add(`0)">
            <summary>
            Adds a range of objects to the underlying context
            </summary>
            <param name="o">The objects to add</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.AddOrUpdate(`0)">
            <summary>
            Adds or updates a range of objects to the underlying context
            </summary>
            <param name="o">The objects to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls AddRange on the underlying context
            </summary>
            <param name="o">The objects to add</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.BeginWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Takes the specified WriteContext and registers it, then enables data persistence. If this is the first open context, all entities retrieved before this point are detached to prevent accidental saves
            </summary>
            <param name="context">The write context to open this persistence context with</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.CancelWrite">
            <summary>
            Closes all open write contexts, and detaches all changed entities for safety
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Commit(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Commits all changed entities to the database. requires a valid open write context to ensure operations are being performed in the correct scope
            </summary>
            <param name="writeContext">Any valid open write context</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.CommitASync(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Commits all changed entities to the database. requires a valid open write context to ensure operations are being performed in the correct scope
            </summary>
            <param name="writeContext">Any valid open write context</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Delete(`0)">
            <summary>
            Deletes an of entities from the underlying context. If auditableEntities, simply sets the date deleted
            </summary>
            <param name="o">the object to delete</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.EndWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            Closes the provided writecontext, and persists changes if it was the last open context (then detaches entities)
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Find(System.Object)">
            <summary>
            Gets an object by its primary key
            </summary>
            <param name="Key">The key to search for</param>
            <returns>An object (or null) with a matching key</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.GetWriteContexts">
            <summary>
            Returns an immutable array of all write contexts currently open on this persistence context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.OfType``1">
            <summary>
            Returns a subset including only the derived type from the underlying persistence context
            </summary>
            <typeparam name="TDerived">A type derived from the persistence context type</typeparam>
            <returns>A subset including only the derived type from the underlying persistence context</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.Update(`0)">
            <summary>
            Updates a list of objects on the underlying DbContext
            </summary>
            <param name="o">The object list to update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.WriteContext">
            <summary>
            Generates a new WriteContext capable of opening this PersistenceContext
            </summary>
            <returns>A new WriteContext capable of opening this PersistenceContext</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.IncludeStrings(System.Type,System.String,System.Boolean)">
            <summary>
            Generates a list of strings to Include while accessing the database, using the EagerLoad attributes found on the properties
            </summary>
            <param name="toGenerate">The type to generate the strings for</param>
            <param name="NameSpace">The current namespace formatted property list representing where we are in our recursive hierarchy</param>
            <param name="Recursive">Whether or not we should continue recursing into child properties</param>
            <returns>A list of strings to Include while accessing the database</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.EFPersistenceContext`1.IncludeStrings(System.Collections.Generic.Stack{System.Type},System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Generates a list of strings to Include while accessing the database, using the EagerLoad attributes found on the properties
            </summary>
            <param name="toGenerate">The type to generate the strings for</param>
            <param name="NameSpace">The current namespace formatted property list representing where we are in our recursive hierarchy</param>
            <param name="Recursive">Whether or not we should continue recursing into child properties</param>
            <param name="depth">Any depth that has already been specified (as non infinite) to be used when capping off the recursion</param>
            <returns>A list of strings to Include while accessing the database</returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.WriteContextBag">
            <summary>
            Generic types dont share static properties so this holder
            exists to provide all context types with access to the same bag through a shared class
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.WriteContextBag.Item(Penguin.Persistence.Repositories.EntityFramework.Abstractions.Interfaces.IDbContext)">
            <summary>
            Accesses contexts in this bag that are associated with the specified DbContext
            </summary>
            <param name="context">The DbContext to use when getting the WriteContexts</param>
            <returns></returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.Abstractions.Interfaces.IDbContext">
            <summary>
            An interface ensuring standard access for any type attempting to fill the role of a DbContext
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper">
            <summary>
            Abstract context wrapper class that forwards needed properties to the internal DB context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.ChangeTracker">
            <summary>
            Forwarded to current instance
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.IsDisposed">
            <summary>
            Checks to see if the instance is still valid
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.DbContext">
            <summary>
            The current DbContext instance being referenced
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.BeginWrite(System.Boolean)">
            <summary>
            Preps the DbContext for a new write context
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.Dispose">
            <summary>
            Handles the disposal logic for the current instance
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.Entry(System.Object)">
            <summary>
            Retrieves an entity entry from the underlying context
            </summary>
            <param name="entity">The entity to get the entry for</param>
            <returns>The entity entry for the object</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.SaveChanges">
            <summary>
            Forwarded to current instance
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.SaveChangesAsync">
            <summary>
            Forwarded to current instance
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.Set``1">
            <summary>
            Forwarded to current instance
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.BaseContextWrapper.Set(System.Type)">
            <summary>
            Forwarded to current instance
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.Objects.EFContextMigrator">
            <summary>
            A class designed to initialize and update the database schema
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.EFContextMigrator.#ctor(Penguin.Persistence.Abstractions.PersistenceConnectionInfo)">
            <summary>
            Constructs a new instance of the migrator using the provided connection string
            </summary>
            <param name="connectionInfo"></param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.EFContextMigrator.Migrate">
            <summary>
            Updates the database to reflect the current EntityFramework Schema
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.EFContextMigrator.IsServerConnected(System.String)">
            <summary>
            Test that the server is connected
            </summary>
            <param name="connectionString">The connection string</param>
            <returns>true if the connection is opened</returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper">
            <summary>
            A container that generates a new dynamic context each time the previous one is closed without disposing of the originals
            To maintain lazyloading
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.Guid">
            <summary>
            Generated at construction to track context resolution
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.IsDisposed">
            <summary>
            Always returns false since there is always a context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.DbContext">
            <summary>
            Accesses the current DbContext or creates a new one
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.GraveYard">
            <summary>
            Contains the "Disposed" contexts
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.#ctor(System.IServiceProvider)">
            <summary>
            Populates the internal service provider so the Extended Use context knows where to request new contexts from
            </summary>
            <param name="serviceProvider">The connection info to use for the generated contexts</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.BeginWrite(System.Boolean)">
            <summary>
            Moves the existing context to the graveyard so that changes cant be saved on it
            </summary>
            <param name="newWrite">True if the context has not already been opened</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.Dispose">
            <summary>
            Pushes the last context to the graveyard and sets the reference to null so a new one can be instantiated if needed
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.SaveChanges">
            <summary>
            Saves the changes on the underlying context
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.Objects.ExtendedUseDbContextWrapper.SaveChangesAsync">
            <summary>
            Saves the changes on the underlying context
            </summary>
            <returns>A task for the Async</returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.SingleUseDbContext">
            <summary>
            Wraps a DbContext so that it is disposed of when the WriteContext closes
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.SingleUseDbContext.IsDisposed">
            <summary>
            Checks if the underlying context has been disposed
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.SingleUseDbContext.DbContext">
            <summary>
            The backing DbContext
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.SingleUseDbContext.#ctor(Penguin.Persistence.Abstractions.PersistenceConnectionInfo,System.Boolean)">
            <summary>
            Constructs a new instance of this wrapping class
            </summary>
            <param name="connectionInfo">The connection info to use with the DynamicContext</param>
            <param name="preventDispose">Prevents the underlying context from being dispose when Dispose() is called (in case there are lazy loaded entities)</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.SingleUseDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of this wrapping class
            </summary>
            <param name="connectionString">The connection string to use with the DynamicContext</param>
            <param name="preventDispose">Prevents the underlying context from being dispose when Dispose() is called (in case there are lazy loaded entities)</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.SingleUseDbContext.BeginWrite(System.Boolean)">
            <summary>
            Detatches all existing items from the context
            </summary>
            <param name="newWrite">True if the context has not already been opened</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.SingleUseDbContext.Dispose">
            <summary>
            Requests that the underlying context be disposed
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Repositories.EntityFramework.WriteContext">
            <summary>
            A WriteContext implementation intended for use with the EFPersistenceContext
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Async">
            <summary>
            A bool representing whether or not this WriteContext should attempt to commit changes asynchronously
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Context">
            <summary>
            The PersistenceContext that spawned this write context
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.#ctor(Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext)">
            <summary>
            Creates a new instance of this write context using the provided persistencecontext as a source
            </summary>
            <param name="context">The persistence context to use for these changes</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.CancelWrite">
            <summary>
            Cancels any open writes and detaches all entities
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Dispose">
            <summary>
            Disposes of this WriteContext and attempts to persist any changes
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Dispose(System.Boolean)">
            <summary>
            Disposes of this WriteContext and attempts to persist any changes
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.EntityFramework.WriteContext.Finalize">
            <summary>
            Disposes of this WriteContext and attempts to persist any changes
            </summary>
        </member>
    </members>
</doc>
